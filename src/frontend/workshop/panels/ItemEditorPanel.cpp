#include "../WorkshopScreen.hpp"

#include "../../../items/ItemDef.hpp"
#include "../IncludeCommons.hpp"
#include "../WorkshopSerializer.hpp"

void workshop::WorkShopScreen::createItemEditor(ItemDef& item) {
	createPanel([this, &item]() {
		std::string actualName(item.name.substr(currentPack.id.size() + 1));
		fs::path filePath(currentPack.folder / ContentPack::ITEMS_FOLDER / std::string(actualName + ".json"));
		bool hasFile = fs::is_regular_file(filePath);

		auto panel = std::make_shared<gui::Panel>(glm::vec2(200));
		panel->add(std::make_shared<gui::Label>(actualName));
		if (!hasFile) {
			panel->add(std::make_shared<gui::Label>(L"Autogenerated item from existing block"));
			panel->add(std::make_shared<gui::Label>(L"Create file to edit item propreties"));
			panel->add(std::make_shared<gui::Button>(L"Create file", glm::vec4(10.f), [this, &item, actualName](gui::GUI*) {
				saveItem(item, currentPack.folder, actualName);
				createItemEditor(item);
			}));
			return panel;
		}
		panel->add(std::make_shared<gui::Label>(L"Stack size:"));
		panel->add(createNumTextBox<uint32_t>(item.stackSize, L"1", 1, 64));
		createEmissionPanel(panel, item.emission);

		panel->add(std::make_shared<gui::Label>(L"Icon"));
		auto textureIco = std::make_shared<gui::Panel>(glm::vec2(panel->getSize().x, 35.f));
		createTexturesPanel(textureIco, 35.f, item.icon, item.iconType);
		panel->add(textureIco);

		const wchar_t* iconTypes[] = { L"none", L"sprite", L"block" };
		auto button = std::make_shared<gui::Button>(L"Icon type: " + std::wstring(iconTypes[static_cast<unsigned int>(item.iconType)]), glm::vec4(10.f), gui::onaction());
		button->listenAction([this, button, iconTypes, &item, textureIco, panel](gui::GUI*) {
			switch (item.iconType) {
			case item_icon_type::block:
				item.iconType = item_icon_type::none;
				item.icon = "core:air";
				break;
			case item_icon_type::none:
				item.iconType = item_icon_type::sprite;
				item.icon = "blocks:notfound";
				break;
			case item_icon_type::sprite:
				item.iconType = item_icon_type::block;
				item.icon = "core:air";
				break;
			}
			removePanels(3);
			button->setText(L"Icon type: " + std::wstring(iconTypes[static_cast<unsigned int>(item.iconType)]));
			clearRemoveList(textureIco);
			createTexturesPanel(textureIco, 35.f, item.icon, item.iconType);
			textureIco->cropToContent();
		});
		panel->add(button);

		panel->add(std::make_shared<gui::Label>(L"Placing block"));
		auto placingBlockPanel = std::make_shared<gui::Panel>(glm::vec2(panel->getSize().x, 35.f));
		panel->add(createTexturesPanel(placingBlockPanel, 35.f, item.placingBlock, item_icon_type::block));

		panel->add(std::make_shared<gui::Label>("Script file"));
		button = std::make_shared<gui::Button>(util::str2wstr_utf8(getScriptName(currentPack, item.scriptName)), glm::vec4(10.f), gui::onaction());
		button->listenAction([this, panel, button, actualName, &item](gui::GUI*) {
			createScriptList(5, panel->calcPos().x + panel->getSize().x, [this, button, actualName, &item](const std::string& string) {
				removePanels(5);
				std::string scriptName(getScriptName(currentPack, string));
				item.scriptName = (scriptName == NOT_SET ? (getScriptName(currentPack, actualName) == NOT_SET ? actualName : "") : scriptName);
				button->setText(util::str2wstr_utf8(scriptName));
			});
		});
		panel->add(button);

		panel->add(std::make_shared<gui::Button>(L"Save", glm::vec4(10.f), [this, actualName, &item](gui::GUI*) {
			saveItem(item, currentPack.folder, actualName);
		}));
		if (!item.generated) {
			panel->add(std::make_shared<gui::Button>(L"Rename", glm::vec4(10.f), [this, actualName](gui::GUI*) {
				createDefActionPanel(DefAction::RENAME, DefType::ITEM, actualName);
			}));
		}
		panel->add(std::make_shared<gui::Button>(L"Delete", glm::vec4(10.f), [this, &item, actualName](gui::GUI*) {
			createDefActionPanel(DefAction::DELETE, DefType::ITEM, actualName, !item.generated);
		}));

		return panel;
	}, 2);
}